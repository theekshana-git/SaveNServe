<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4AERERBA8P
        DwUQEBAADw8PAg4ODgINDQ0CDg4OAg0NDQEKCgoBCwsLAwwMDAABAQEAAwMDAAEBAQAGBgYADQ0NBQwM
        DAQLCwsADQ0NAgoKCgIKCgoABgYGAA8PDwIMDAwBEBAQAQwMDAMHBwcABwcHAAAAAAAAAAAAEBAQAA8P
        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
        CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAADg4OAA4ODg0TExPGFBQU/xMTE8YRERE4FhYWAAwMDAAAAAAADg4OAA0NDQQQEBBPDw8PhAwM
        DGUICAgJCQkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAANDQ0ACwsLAhEREVcSEhJqEBAQGhgYGAAGBgYAAAAAAAAAAAAAAAAAERERABER
        EQcODg5ICgoKJ////wAFBQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABgYGAAgICAEGBgYABQUFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////kB8mHwAAAA8AAAAHAAAADwAAAA8Pw
        B//j+Af/gR/+A4AAAAGAAAABwCAGA/gOOA/+BhA//4IA///gAf//8Af///wP///4B///4AP//+DB///A
        wf//weD//8Px////+/////////////////8=
</value>
  </data>
</root>